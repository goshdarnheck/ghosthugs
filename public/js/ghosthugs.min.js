(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
window.onload = function () {
	function getDocHeight() {
		var D = document;
		return Math.max(D.body.scrollHeight, D.documentElement.scrollHeight, D.body.offsetHeight, D.documentElement.offsetHeight, D.body.clientHeight, D.documentElement.clientHeight);
	}

	var winW = document.body.clientWidth;
	var winH = getDocHeight();
	var starEmitter;
	var player;
	var playerSpeed = 5;
	var baddieAmount = 10;
	var baddieTypes = [{ 'color': 0xff0000, 'effect': 'tiny' }, { 'color': 0x00ff00, 'effect': 'big' }, { 'color': 0x0000ff, 'effect': 'big' }, { 'color': 0x00ffff, 'effect': 'big' }, { 'color': 0xffff00, 'effect': 'big' }, { 'color': 0xff00ff, 'effect': 'small' }, { 'color': 0xff9900, 'effect': 'small' }, { 'color': 0xff0099, 'effect': 'big' }, { 'color': 0x0099ff, 'effect': 'big' }, { 'color': 0x9900ff, 'effect': 'big' }];

	var game = new Phaser.Game(winW, winH, Phaser.AUTO, 'game', { preload: preload, create: create, update: update });

	// LOAD ASSETS
	function preload() {
		game.load.image('ghostshugging', 'images/sprites/ghostshugging.png');
		game.load.image('ghost', 'images/sprites/ghost.png');
		game.load.image('spark', 'images/sprites/spark.png');
	}

	// RUNS WHEN THE GAME STARTS
	function create() {
		game.physics.startSystem(Phaser.Physics.ARCADE);

		game.stage.backgroundColor = '#0072bc';
		game.stage.smoothed = false;
		// Phaser.Canvas.setSmoo
		// game.scaleMode = Phaser.ScaleManager.NO_SCALE;
		// game.scaleMode = Phaser.ScaleManager.USER_SCALE;
		// game.scaleMode = Phaser.ScaleManager.SHOW_ALL;

		// LOGO SETUP
		logo = game.add.sprite(game.world.centerX, game.world.centerY, 'ghostshugging');
		logo.smoothed = false;
		logo.anchor.set(0.5);
		logo.scale.set(2);

		// EMITTER SETUP
		starEmitter = game.add.emitter(0, 0, 30);
		starEmitter.makeParticles('spark');
		starEmitter.gravity = 0;
		starEmitter.forEach(function (particle) {
			particle.smoothed = false;
			particle.tint = 0xffffff;
		});
		starEmitter.minParticleScale = 0.5;
		starEmitter.maxParticleScale = 3;

		// PLAYER SETUP
		player = game.add.sprite(200, 200, 'ghost');
		player.anchor.set(0.5);
		player.smoothed = false;
		player.goal = false;
		game.physics.enable(player, Phaser.Physics.ARCADE);
		player.body.immovable = true;

		// BADDIES SETUP
		baddies = game.add.group();
		for (var i = 0; i < baddieAmount; i++) {
			var baddieType = game.rnd.integerInRange(0, baddieTypes.length - 1);
			var baddie = baddies.create(game.rnd.integerInRange(10, winW - 10), game.rnd.integerInRange(10, winH - 10), 'ghost');
			baddie.smoothed = false;
			baddie.tint = baddieTypes[baddieType].color;
			game.physics.enable(baddie, Phaser.Physics.ARCADE);
			baddie.body.immovable = true;
			baddie.effect = baddieTypes[baddieType].effect;
			baddie.randomDestinationCounter = 0;
		}
	}

	function particleBurst() {
		starEmitter.x = player.x;
		starEmitter.y = player.y;
		starEmitter.start(true, 3000, null, 10);
	}

	// BIG GAME LOOP
	function update() {
		if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT) && player.x - player.width / 2 - 1 > 0) {
			player.x -= playerSpeed;
		} else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT) && player.x + player.width / 2 + 1 < game.width) {
			player.x += playerSpeed;
		}

		if (game.input.keyboard.isDown(Phaser.Keyboard.UP) && player.y - player.height / 2 - 1 > 0) {
			player.y -= playerSpeed;
		} else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN) && player.y + player.height / 2 + 1 < game.height) {
			player.y += playerSpeed;
		}

		baddies.forEachAlive(baddieUpdate, this);

		if (player.scale.x == 10 && player.goal == false) {
			player.scale.x = 1;
			player.scale.y = 1;
			player.goal = true;

			logo.scale.x = Math.min(logo.scale.x + 1, 30);
			logo.scale.y = Math.min(logo.scale.y + 1, 30);

			particleBurst();
		}

		starEmitter.forEachAlive(function (p) {
			p.alpha = p.lifespan / starEmitter.lifespan;
		});
	}

	function playerBaddieOverlap(player, baddie) {
		baddie.kill();

		switch (baddie.effect) {
			case 'small':
				player.scale.x = Math.max(player.scale.x - 1, 1);
				player.scale.y = Math.max(player.scale.y - 1, 1);
				break;
			case 'big':
				player.scale.x = Math.min(player.scale.x + 1, 10);
				player.scale.y = Math.min(player.scale.y + 1, 10);
				break;
			case 'tiny':
				player.scale.x = 1;
				player.scale.y = 1;
				player.goal = false;
				break;
		}

		var recycledBaddie = baddies.getFirstDead();
		var recycledBaddieType = game.rnd.integerInRange(0, baddieTypes.length - 1);
		recycledBaddie.reset(game.rnd.integerInRange(10, winW - 10), game.rnd.integerInRange(10, winH - 10), 1);
		recycledBaddie.tint = baddieTypes[recycledBaddieType].color;
		recycledBaddie.effect = baddieTypes[recycledBaddieType].effect;
	}

	function baddieUpdate(baddie) {
		var randomMovement = game.rnd.integerInRange(0, 100) > 99 ? true : false;

		if (baddie.x >= baddie.xDest - 10 && baddie.x <= baddie.xDest + 10 && baddie.y >= baddie.yDest - 10 && baddie.y <= baddie.yDest + 10) {
			baddie.randomDestinationCounter = 0;
			randomMovement = false;
		}

		if (baddie.randomDestinationCounter > 0) {
			baddie.randomDestinationCounter--;

			game.physics.arcade.moveToXY(baddie, baddie.xDest, baddie.yDest, 120, 0);
		} else if (randomMovement) {
			baddie.randomDestinationCounter = game.rnd.integerInRange(100, 400);
			baddie.xDest = game.rnd.integerInRange(10, winW - 10);
			baddie.yDest = game.rnd.integerInRange(10, winH - 10);

			game.physics.arcade.moveToXY(baddie, baddie.xDest, baddie.yDest, 120, 0);
		} else {
			game.physics.arcade.moveToObject(baddie, player, 120, false);
		}

		game.physics.arcade.overlap(player, baddie, playerBaddieOverlap, null, this);
	}

	// FOR RESIZING THE SCREEN
	window.addEventListener('resize', function (ev) {
		resizeGame();
	});

	function resizeGame() {
		var width = document.body.clientWidth;
		var height = getDocHeight();

		// game.width = width;
		// game.height = height;

		game.scale.setGameSize(width, height);
		game.stage.getBounds.width = width;
		game.stage.getBounds.height = height;

		if (game.renderType === Phaser.WEBGL) {
			game.renderer.resize(width, height);
		}

		if (player.x > game.width) {
			player.x = width - player.width / 2 + 2;
		}

		if (player.y > game.height) {
			player.y = height - player.height / 2 + 2;
		}

		logo.x = Math.round(game.width / 2);
		logo.y = Math.round(game.height / 2);
	}
};

},{}]},{},[1])
//# sourceMappingURL=ghosthugs.min.js.map
